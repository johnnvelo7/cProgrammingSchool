Exercises for lession 9:

Exercise 1: Makefiles
=====================

Look at http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/ and go through the examples.

Exercise 2: Doubly linked lists
===============================

Look at List/lish.h and list.c. Rewrite the list to be a doubly linked list.
For the list-head and tail use the following struct:

typedef struct _LISTHEAD {
   LIST *pHead;
   LIST *pTail;
} LISTHEAD;

Rewrite the Insert/Append/Delete-functions to use a LISTHEAD * as first parameter.
Rewrite testlist.c to handle the new format.

Excercise 3: Sorting lists
==========================

Rewrite list.h / list.c to handle lists of this type:

typedef struct _LIST {
   struct _LIST *pNext;
   char *pszString;
} LIST;

Add a InsertSorted() function that, when inserting elements, keeps a list of strings sorted
in alphabetical order.

Excercise 4: Sorting lists - a bit more challenging
===================================================

Based on excercize 3. Rewrite list.h / list.c to handle lists of this type:

#define MAX_KEY 32

typedef struct _LIST {
   struct _LIST *pNext;
   char szKey[MAX_KEY];
   char *pszValue;
   int  iValue;
} LIST;

Add code that reads any number of lines from a file on the following format:

   <key>=[<numeric value>|"<string value>"]

For example...

   college="Westerdals"
   class=2
   grade="A+"
   students=77

Use a variant of the InsertSorted() function that, when inserting elements,
keeps the list sorted and ensures that the key doesn't become too long.

Add a function Lookup() that looks up a key and returns the value.
How can you handle the two types, integer and string?

Add another function Delete() that deletes an element given the key.

Keep the list handling in one source file and the reading of the key/value
pair file in the main source file.






